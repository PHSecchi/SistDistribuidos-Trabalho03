import Pyro5.api
import threading

class Cliente:
    def __init__(self, name, daemon, ns):
        self.name = name
        self.logs = []
        self.count = 0
        self.listClient = []
        self.register(daemon, ns)
        self.getLider(ns)
        self.infoLider()
    
    def getName(self):
        return self.name
    
    def register(self, daemon, ns):
        self.uri = daemon.register(self)
        ns.register(self.name, self.uri)
        print(f"Objeto {self.name} registrado com URI: {self.uri}")
    
    def getLider(self, ns):
        try:
            lider_uri = ns.lookup("Lider_Epoca1")
            print(type(lider_uri))
            self.lider = Pyro5.api.Proxy(lider_uri)
            self.lider._pyroBind()
            print(f"Líder encontrado: {lider_uri}")
        except Pyro5.errors.CommunicationError as e:
            print(f"Erro ao conectar ao líder: {e}")
    
    def infoLider(self):
        info = {
            'cliente': self.name,
            'type': 1,
            'uri': self.uri
        }
        try:
            self.lider.infoNewVot_Obs(info)
            print("Informações do líder enviadas.")
        except Pyro5.errors.CommunicationError as e:
            print(f"Erro ao enviar informações para o líder: {e}")
    
    @Pyro5.api.expose
    @Pyro5.api.oneway
    def reciveNotification(self, notification):
        print(f"Notificação recebida: {notification}")
    
def main():
    ns = Pyro5.api.locate_ns()
    daemon = Pyro5.api.Daemon()

    # Criar cliente
    cliente1 = Cliente(f'Cliente_{ns.count()}', daemon, ns)

    # Rodar o daemon em uma thread separada
    threading.Thread(target=daemon.requestLoop, daemon=True).start()
    print("Daemon rodando em segundo plano...")

    # Mantendo o programa ativo para interações
    while True:
        cmd = input("Digite 'sair' para encerrar: ").strip().lower()
        if cmd == "sair":
            daemon.shutdown()
            print("Encerrando o programa.")
            break

if __name__ == "__main__":
    main()
